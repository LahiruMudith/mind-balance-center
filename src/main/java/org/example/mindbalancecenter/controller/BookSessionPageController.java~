package org.example.mindbalancecenter.controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.ImageView;
import javafx.stage.*;
import org.example.mindbalancecenter.bo.BOFactory;
import org.example.mindbalancecenter.bo.SessionBookBO;
import org.example.mindbalancecenter.dto.PatientDto;
import org.example.mindbalancecenter.dto.TherapistDto;
import org.example.mindbalancecenter.dto.TherapyProgramDto;
import org.example.mindbalancecenter.dto.TherapySessionDto;
import org.example.mindbalancecenter.dto.tm.TherapySessionTM;

import java.io.IOException;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;
import java.util.ResourceBundle;

public class BookSessionPageController implements Initializable {
    SessionBookBO sessionBookBO = (SessionBookBO) BOFactory.getInstance().getBO(BOFactory.BOType.SESSION);

    @FXML
    private Button btnBookSession;

    @FXML
    private ImageView btnSetting2;

    @FXML
    private ComboBox<String> cmbPatientId;

    @FXML
    private ComboBox<String> cmbProgramId;

    @FXML
    private TableColumn<TherapySessionTM, BigDecimal> colAmount;

    @FXML
    private TableColumn<TherapySessionTM, Date> colDate;

    @FXML
    private TableColumn<TherapySessionTM, Button> colDeleteBtns;

    @FXML
    private TableColumn<TherapySessionTM, String> colId;

    @FXML
    private TableColumn<TherapySessionTM, Boolean> colPaymentSatus;

    @FXML
    private DatePicker datepicker;

    @FXML
    private CheckBox paymentStatus;

    @FXML
    private TableView<TherapySessionTM> tblPatient;

    @FXML
    private TextField txtDayAmount;

    @FXML
    private TextField txtDuration;

    @FXML
    private TextField txtExperienceYear;

    @FXML
    private TextField txtId;

    @FXML
    private TextField txtPatientName;

    @FXML
    private TextField txtPhoneNumber;

    @FXML
    private TextField txtProgramName;

    @FXML
    private TextField txtRemainingAMount;

    @FXML
    private TextField txtRemainingDay;

    @FXML
    private TextField txtSpecialization;

    @FXML
    private TextField txtTherapystName;

    @FXML
    private TextField txtTotal;

    @FXML
    void btnBookSession(ActionEvent event) {
        boolean b = sessionBookBO.bookSession(
                new TherapySessionDto(
                        txtId.getText(),
                        cmbPatientId.getValue(),
                        txtPhoneNumber.getText(),
                        txtDuration.getText(),
                        Date.valueOf(datepicker.getValue()),
                        Date.valueOf(LocalDate.now()),
                        txtTherapystName.getText(),
                        cmbProgramId.getValue(),
                        new BigDecimal(txtDayAmount.getText()),
                        new BigDecimal(txtRemainingAMount.getText()),
                        paymentStatus.isSelected()
                )
        );
        if (b){
            new Alert(Alert.AlertType.CONFIRMATION, "Session Booking Complete").show();
        }else {
            new Alert(Alert.AlertType.ERROR, "Session Booking Fail").show();
        }
    }

    @FXML
    void cmbPatientId(ActionEvent event) {
        try {
            PatientDto patient  = sessionBookBO.serchById(cmbPatientId.getValue());
            if (patient != null) {
                txtPatientName.setText(patient.getName());
                txtPhoneNumber.setText(patient.getPhoneNumber());
            }
            cmbProgramId.setDisable(false);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }
    void clearFields(){
        txtId.clear();
        txtPatientName.clear();
        txtPhoneNumber.clear();
        txtProgramName.clear();
        txtTherapystName.clear();
        txtSpecialization.clear();
        txtExperienceYear.clear();
        txtDuration.clear();
        txtDayAmount.clear();
        txtTotal.clear();
        txtRemainingAMount.clear();
        txtRemainingDay.clear();
    }
    void pageRefesh(){
        clearFields();

        //set the Session Id
        try {
            String newId = sessionBookBO.getNewId();
            txtId.setText(newId);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }

        try {
            List<PatientDto> patientDtos = sessionBookBO.getAllMembers();
            ObservableList<String> pationName = FXCollections.observableArrayList();
            for (PatientDto patientDto : patientDtos){
                pationName.add(patientDto.getId());
            }
            cmbPatientId.setItems(pationName);

            List<TherapyProgramDto> allPrograms = sessionBookBO.getAllPrograms();
            ObservableList<String> programNames = FXCollections.observableArrayList();
            for (TherapyProgramDto programDto : allPrograms){
                programNames.add(programDto.getId());
            }
            cmbProgramId.setItems(programNames);

        } catch (SQLException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    public void setProgramName(String value) {
        txtProgramName.setText(value);
    }

    public void cmdProgramId(ActionEvent actionEvent) throws Exception {
        String selectedItemId = cmbProgramId.getSelectionModel().getSelectedItem();

        TherapyProgramDto therapyProgramDto = sessionBookBO.searchProgramById(selectedItemId);
        txtProgramName.setText(therapyProgramDto.getName());
        txtDuration.setText(therapyProgramDto.getDuration());
        txtProgramName.setText(therapyProgramDto.getName());
        txtTotal.setText(therapyProgramDto.getCost().stripTrailingZeros().toPlainString());

        TherapistDto therapistDto = sessionBookBO.searchTherapistById(therapyProgramDto.getTherapistName());
        txtTherapystName.setText(therapistDto.getName());
        txtSpecialization.setText(therapistDto.getSpecialization());
        txtExperienceYear.setText(therapistDto.getExperienceYear());

        // Calculate day cost
        double total = therapyProgramDto.getCost().doubleValue();
        double advanceAmount = total * 0.10;
        double dayCost = (total - advanceAmount) / Integer.valueOf(therapyProgramDto.getDuration());
        txtDayAmount.setText(String.valueOf(dayCost));

        //Calculate remaining day count
        Long remainingDayCount = sessionBookBO.findRemainingDayCount(cmbPatientId.getValue(), cmbProgramId.getValue());
        txtRemainingDay.setText(String.valueOf(remainingDayCount));

        //Calculate remaining amount
        double remainingAmount = total - ( advanceAmount + (dayCost * remainingDayCount));
        txtRemainingAMount.setText(String.valueOf(remainingAmount));
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        pageRefesh();
    }
}
